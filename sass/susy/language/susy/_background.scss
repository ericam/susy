// Background Grid Syntax
// ======================

$susy-overlay-grid-head-exists: false;


// Show Grid/s
// -----------
// Show grid on any element using either background or overlay.
// - [$grid]  : <settings>
@mixin show-grid(
  $grid: $susy
) {
  $inspect: $grid;
  $_output: debug-get(output, $grid);

  @include susy-inspect(show-grid, $inspect);
  @if $_output == overlay {
    @include overlay-grid($grid);
  } @else {
    @include background-grid($grid);
  }
}

@mixin show-grids(
  $grid: $susy
) {
  @include show-grid($grid);
}

// Background Grid
// ---------------
// Show a grid background on any element.
// - [$grid]  : <settings>
@mixin background-grid(
  $grid: $susy
) {
  
  $colums-count: susy-count(  susy-get(columns, $grid));
  $debug-color: susy-get(debug color, $grid);
  $debug-color-light: lighten($debug-color,10) ;
  $gutter: gutter($grid);
 
  $svg-grid: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">';
  //Devs
  $svg-grid : $svg-grid + '<defs>';
  $svg-grid : $svg-grid + '<linearGradient id="gr" x1="0%" y1="0%" x2="100%" y2="0%">';
  $svg-grid : $svg-grid + '<stop offset="0%" style="stop-color:#{$debug-color};" />';
  $svg-grid : $svg-grid + '<stop offset="100%" style="stop-color:#{$debug-color-light};" />';
  $svg-grid : $svg-grid + '</linearGradient>';
  
  @if variable-exists(base-line-height){

    $svg-grid : $svg-grid +'<pattern patternUnits="userSpaceOnUse" id="baseline" width="100%" height="#{$base-line-height}" >';
    $svg-grid : $svg-grid +'<line x1="-10%" y1="1" x2="110%" y2="1" stroke="#666" stroke-width="0.5"  />';
    $svg-grid : $svg-grid +'</pattern>';
  }
  $svg-grid : $svg-grid + '</defs>';
  @for $i from 1 through $colums-count {
    $x: isolate($i of $grid);
    $span: span(1 at $i of $grid);
    $svg-grid : $svg-grid +  '<rect x="#{$x}" fill="url(#gr)" width="#{$span}" height="100%"/>';
  }
  @if variable-exists(base-line-height){
    $svg-grid : $svg-grid +  '<rect x="0" fill="url(#baseline)" width="100%" height="100%"/>';
  }

  $svg-grid : $svg-grid +  '</svg>';
  $data-prefix:"data:image/svg+xml,";

  background-image: url( $data-prefix + html-encode($svg-grid));
  background-size: 100% 100%;
  background-position: 0 0;
}


// Overlay Grid
// ------------
// Generate an icon to trigger grid-overlays on any given elements.
// $grids...  : <selector> [<settings>] [, <selector>]*
@mixin overlay-grid (
  $grid: $susy
) {
  @if not($susy-overlay-grid-head-exists) {
    @at-root head { @include overlay-head; }
    @at-root head:before { @include overlay-trigger; }
    @at-root head:hover { @include overlay-trigger-hover; }
    $susy-overlay-grid-head-exists: true !global;
  }

  head:hover ~ &,
  head:hover ~ body & {
    position: relative;
    &:before {
      @include grid-overlay-base;
      @include background-grid($grid);
    }
  }
}


// [Private] Overlay Trigger
// -------------------------
@mixin overlay-trigger {
  content: "|||";
  display: block;
  padding: 5px 10px;
  font: {
    family: sans-serif;
    size: 16px;
    weight: bold;
  }
}


// [Private] Overlay Trigger Hover
// -------------------------------
@mixin overlay-trigger-hover {
  background: rgba(white, .5);
  color: red;
}


// [Private] Overlay Head
// ----------------------
// <head> styles to create grid overlay toggle
@mixin overlay-head {
  $_toggle: debug-get(toggle);
  $_horz: null;
  $_vert: null;

  @each $side in $_toggle {
    $_horz: if($side == left or $side == right, $side, $_horz);
    $_vert: if($side == top or $side == bottom, $side, $_vert);
  }

  display: block;
  position: fixed;
  #{$_horz}: 10px;
  #{$_vert}: 10px;
  z-index: 999;
  color: #333;
  background: rgba(white, .25);
}


// [Private] Grid Overlay Base
// ---------------------------
// Base styles for generating a grid overlay
@mixin grid-overlay-base() {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  content: " ";
  z-index: 998;
}


// Get Debug
// ---------
// Return the value of a debug setting
// - $key: <setting>
@function debug-get(
  $key,
  $grid: $susy
) {
  $key: join(debug, $key, space);
  @return susy-get($key, $grid);
}
