// Span Syntax
// ===========

@import "compass/css3/box-sizing";

// Span [mixin]
// ------------
// Set a spanning element using shorthand syntax.
// - $span  : <span>
@mixin span(
  $span
) {
  $span     : parse-span($span);
  $output   : span-math($span...);
  $box      : get-span-setting(box-sizing, $span);

  $this-gutter-position: get-span-setting(gutter-position, $span);
  $inside   : if($this-gutter-position == inside or $this-gutter-position == inside-static, true, false);

  @if $box == border-box or $inside {
    @include box-sizing(border-box);
  } @else if $box == content-box {
    @include box-sizing(content-box);
  }

  @include float-span-output($output...);

  @include nested($span) { @content; }
}

// Span [function]
// ---------------
// Return the width of a span.
// - $span  : <span>
@function span(
  $span
) {
  $span                   : parse-span($span);

  $width                  : get-span-setting(span, $span);

  $this-location          : get-span-setting(location, $span);
  $this-columns           : get-span-setting(columns, $span);
  $this-gutters           : get-span-setting(gutters, $span);
  $this-column-width      : get-span-setting(column-width, $span);
  $this-layout-math       : get-span-setting(layout-math, $span);
  $this-gutter-position   : get-span-setting(gutter-position, $span);
  $outer                  : get-span-setting(outer, $span);

  $width: get-span-width($width, $this-location, $this-columns, $this-gutters, $this-column-width, $this-layout-math, $this-gutter-position, $outer);

  @return $width;
}

// Parse Span
// ----------
// Parse the span shortcut syntax.
// - $string  : <span>
@function parse-span(
  $string
) {
  $new-span               : false;
  $new-location           : false;
  $new-context            : false;
  $new-layout-method      : false;
  $new-layout-math        : false;
  $new-columns            : false;
  $new-gutters            : false;
  $new-column-width       : false;
  $outer                  : false;
  $new-flow               : false;
  $new-gutter-position    : false;
  $gutter-override        : false;

  $is-container           : false;

  $i: 1;

  @while $i <= length($string) {
    $value  : nth($string,$i);
    $at     : false;
    $of     : false;
    $gutter : false;

    // keywords
    @if type-of($value) == string {

      // location keywords: first | last | alpha | omega
      @if $value == first or $value == alpha {
        $new-location: 1;
      } @else if $value == last or $value == omega {
        $new-location: last;
      }

      // layout-method
      @else if $value == isolate {
        $new-layout-method: isolate;
      } @else if $value == float {
        $new-layout-method: float;
      }

      // layout-math | fluid
      @else if $value == static {
        $new-layout-math: static;
      } @else if $value == fluid {
        $new-layout-math: fluid;
      }

      // ltr | rtl
      @else if $value == outer {
        $outer: outer;
      }

      // ltr | rtl
      @else if $value == rtl {
        $new-flow: rtl;
      } @else if $value == ltr {
        $new-flow: ltr;
      }

      // after | before | split | inside | no-gutters
      @else if $value == after {
        $new-gutter-position: after;
      } @else if $value == before {
        $new-gutter-position: before;
      } @else if $value == split {
        $new-gutter-position: split;
      } @else if $value == inside {
        $new-gutter-position: inside;
      } @else if $value == inside-static {
        $new-gutter-position: inside-static;
      } @else if $value == no-gutter or $value == no-gutters {
        $new-gutter-position: no-gutters;
      }

      // container
      @else if $value == container {
        $is-container: container;
      }

      // at
      @else if $value == at {
        $at: true;
      }

      // of
      @else if $value == of {
        $of: true;
      }

      // gutter
      @else if $value == gutter or $value == gutters {
        $gutter: true;
      }

    // span
    } @else if not $new-span and type-of($value) == number {
      $new-span: $value;
    }

    // location integer
    @if $at {
      $i: $i + 1;
      $new-location: nth($string, $i);
    }

    // gutter override
    @if $gutter {
      $i: $i + 1;
      $gutter-override: nth($string, $i);
    }

    // context
    @if $of {
      $i: $i + 1;
      $new-context: ();

      @while $of and $i <= length($string) {
        $this: nth($string,$i);
        @if type-of($this) != string {
          $new-context: append($new-context, $this);
          $i: $i + 1;
        } @else {
          $of: false;
          $i: $i - 1;
        }
      }
    }

    $i: $i + 1;
  }

  // parse the context
  @if $new-context {
    $new-context        : parse-grid($new-context);
    $new-columns        : get-setting(columns, $new-context);
    $new-gutters        : get-setting(gutters, $new-context);
    $new-column-width   : get-setting(column-width, $new-context);
  }

  // use global values for empty grid settings
  $new-columns            : if($new-columns, $new-columns, $columns);
  $new-gutters            : if($new-gutters, $new-gutters, $gutters);
  $new-column-width       : if($new-column-width, $new-column-width, $column-width);
  $new-layout-math        : if($new-layout-math, $new-layout-math, $layout-math);
  $new-layout-method      : if($new-layout-method, $new-layout-method, $layout-method);
  $new-flow               : if($new-flow, $new-flow, $flow);
  $new-gutter-position    : if($new-gutter-position, $new-gutter-position, $gutter-position);

  @return $new-span, $new-location, $new-columns, $new-gutters, $new-column-width, $new-layout-method, $new-layout-math, $outer, $new-flow, $new-gutter-position, $is-container, $gutter-override;
}

// Get Span Setting
// ----------------
// Return one particular span setting from a list.
// - $setting   : <keyword> (see $options below)
// - $span      : <span>
// - $parse     : <boolean>
@function get-span-setting(
  $setting,
  $span,
  $parse: false
) {
  $options  : span location columns gutters column-width layout-method layout-math outer flow gutter-position is-container gutter-override;
  $key      : index($options, $setting);
  $value    : false;

  @if $parse {
    $span: parse-span($span);
  }

  @if $key {
    $value: nth($span, $key);
  }

  @return $value;
}

// Span Math
// ---------
// Get all the span results.
// - $span                : <length> | <number>
// - $location            : first | last | <length> | <number>
// - [$columns]           : <number> | <list>
// - [$gutters]           : <ratio>
// - [$column-width]      : <length>
// - [$layout-method]     : float | isolate
// - [$layout-math]       : fluid | static
// - [$outer]             : <boolean>
// - [$flow]              : ltr | rtl
// - [$gutter-position]   : before | after | split | inside
// - [$is-container]      : <boolean>
// - [$gutter-override]   : <length>
@function span-math(
  $span,
  $location,
  $columns            : $columns,
  $gutters            : $gutters,
  $column-width       : $column-width,
  $layout-method      : $layout-method,
  $layout-math        : $layout-math,
  $outer              : $outer,
  $flow               : $flow,
  $gutter-position    : $gutter-position,
  $is-container       : false,
  $gutter-override    : false
) {
  $float            : from;
  $width            : $span;

  $padding-before   : null;
  $padding-after    : null;
  $margin-before    : null;
  $margin-after     : null;

  // calculate widths
  $width: get-span-width($span, $location, $columns, $gutters, $column-width, $layout-math, $gutter-position, $outer);
  $this-gutters: get-gutters($columns, $gutters, $column-width, $layout-math, $gutter-position, $gutter-override);

  $inside: if($gutter-position == inside or $gutter-position == inside-static, true, false);

  // apply gutters
  @if $inside {
    @if not $is-container {
      $padding-before: nth($this-gutters,1);
      $padding-after: nth($this-gutters,2);
    }
  } @else {
    $margin-before: nth($this-gutters,1);
    $margin-after: nth($this-gutters,2);
  }

  // special margin handling
  @if $layout-method == isolate {
    $margin-before: get-isolation($span, $location, $columns, $gutters, $column-width, $layout-math);
    $margin-after: -100%;
  } @else {
    @if is-last($span, $location, $columns) {
      $float: to;
      $margin-after: null;
    } @else if is-first($location) {
      $margin-before: null;
    }
  }

  @return $width $float $margin-before $margin-after $padding-before $padding-after $flow;
}

// Get Span Width
// --------------
// Return span width.
// - $span                : <length> | <number>
// - $location            : first | last | <length> | <number>
// - [$columns]           : <number> | <list>
// - [$gutters]           : <ratio>
// - [$column-width]      : <length>
// - [$layout-math]       : fluid | static
// - [$gutter-position]   : before | after | split | inside
// - [$outer]             : <boolean>
@function get-span-width(
  $span,
  $location           : 1,
  $columns            : $columns,
  $gutters            : $gutters,
  $column-width       : $column-width,
  $layout-math        : $layout-math,
  $gutter-position    : $gutter-position,
  $outer              : null
) {
  $context  : null;
  $span-sum : null;
  $width    : null;

  $inside: if($gutter-position == inside or $gutter-position == inside-static, true, false);

  @if unitless($span) {
    @if $inside {
      $context: column-sum($columns, $gutters, outer);
      $span-sum: get-column-span-sum($span, $location, $columns, $gutters, outer);
    } @else {
      $context: column-sum($columns, $gutters);
      $span-sum: get-column-span-sum($span, $location, $columns, $gutters, $outer);
    }

    @if $layout-math == static {
      $width: $span-sum * $column-width;
    } @else {
      $width: percentage($span-sum / $context);
    }
  } @else {
    $width: $span;
  }

  @return $width;
}
