// Map Functions
// =============


// Truncate List
// -------------
// - Return a list, truncated to a given length
@function _susy-truncate-list(
  $list,
  $length
) {
  $_return: ();

  @for $i from 1 through length($list) {
    $_return: if($i <= $length, append($_return, nth($list, $i)), $_return);
  }

  @return $_return;
}


// Deep Get
// --------
// - Return a value deep in nested maps
@function _susy-deep-get(
  $map,
  $keys...
) {
  $_return: $map;

  @each $key in $keys {
    @if type-of($_return) == map {
      $_return: map-get($_return, $key);
    }
  }

  @return $_return;
}


// Deep Set
// --------
// - Set a value deep in nested maps
@function _susy-deep-set(
  $map,
  $keys-value...
) {
  $_value: nth($keys-value, -1);
  $_keys: _susy-truncate-list($keys-value, length($keys-value) - 1);
  $_length: length($_keys);
  $_return: ();

  @for $i from 1 through $_length {
    $_n: 0 - $i;
    $_level: _susy-truncate-list($_keys, $_length + $_n);
    $_level: _susy-deep-get($map, $_level...);
    $_merge: nth($_keys, $_n);
    $_merge: ($_merge: $_value);
    $_return: if($_level, map-merge($_level, $_merge), $_merge);
    $_value: $_return;
  }

  @return $_return;
}


// Deep Merge
// ----------
// Return 2 objects of any depth, merged
@function _susy-deep-merge(
  $map1,
  $map2
) {

  @if type-of($map1) != map or type-of($map2) != map {
    $map1: $map2;
  } @else {
    @each $key, $value in $map2 {
      $_new: ($key: _susy_deep-merge(map-get($map1, $key), $value));
      $map1: map-merge($map1, $_new);
    }
  }

  @return $map1;
}


// Deep Has-Key
// ------------
// - Return true if a deep key exists
@function _susy-deep-has-key(
  $map,
  $keys...
) {
  $_return: null;
  $_stop: false;

  @each $key in $keys {
    @if not($_stop) {
      $_return: map-has-key($map, $key);
    }

    @if $_return {
      $map: map-get($map, $key);
    } @else {
      $_stop: true;
    }
  }

  @return $_return;
}



// str-replace 
// ------------
// by Hugo Giraudel
// Replace `$search` with `$replace` in `$string`
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ('') - New value
// @return {String} - Updated string

@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  
  @return $string;
}
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}


// HTML-Encode 
// ------------
// returns a url-encoded string


@function html-encode($string){
  $encodeMap:("%":"%25"," ":"%20","!":"%21","\"":"%22","#":"%23","$":"%24","&":"%26","\'":"%27","(":"%28",")":"%29","*":"%2A","+":"%2B",",":"%2C","-":"%2D",".":"%2E","/":"%2F",":":"%3A",";":"%3B","<":"%3C","=":"%3D",">":"%3E","?":"%3F","@":"%40","[":"%5B","\\":"%5C","]":"%5D","^":"%5E","_":"%5F","`":"%60","{":"%7B","|":"%7C","}":"%7D","~":"%7E","¢":"%A2","£":"%A3","¥":"%A5","§":"%A7","«":"%AB","¬":"%AC","¯":"%AD","º":"%B0","±":"%B1","ª":"%B2","µ":"%B5","»":"%BB","¼":"%BC","½":"%BD","¿":"%BF","À":"%C0","Á":"%C1","Â":"%C2","Ã":"%C3","Ä":"%C4","Å":"%C5","Æ":"%C6","Ç":"%C7","È":"%C8","É":"%C9","Ê":"%CA","Ë":"%CB","Ì":"%CC","Í":"%CD","Î":"%CE","Ï":"%CF","Ð":"%D0","Ñ":"%D1","Ò":"%D2","Ó":"%D3","Ô":"%D4","Õ":"%D5","Ö":"%D6","Ø":"%D8","Ù":"%D9","Ú":"%DA","Û":"%DB","Ü":"%DC","Ý":"%DD","Þ":"%DE","ß":"%DF","à":"%E0","á":"%E1","â":"%E2","ã":"%E3","ä":"%E4","å":"%E5","æ":"%E6","ç":"%E7","è":"%E8","é":"%E9","ê":"%EA","ë":"%EB","ì":"%EC","í":"%ED","î":"%EE","ï":"%EF","ð":"%F0","ñ":"%F1","ò":"%F2","ó":"%F3","ô":"%F4","õ":"%F5","ö":"%F6","÷":"%F7","ø":"%F8","ù":"%F9","ú":"%FA","û":"%FB","ü":"%FC","ý":"%FD","þ":"%FE","ÿ":"%FF");
  @each $search, $replace in $encodeMap {
    $string:  str-replace($string, $search, $replace);
  }
  @return $string;
}
