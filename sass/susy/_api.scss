// Grids
// =====
// - susy-span [function]
// - susy-gutter [function]
// - susy-slice [function]


// Susy Span
// ---------
/// Calculate the width of any grid-span.
/// This is the primary function in Susy,
/// and can be used anywhere you need
/// to span columns on the grid:
/// `width` for grid contents,
/// or `margin` and `padding`
/// to push, pull, and pad your elements.
///
/// @group api
///
/// @param {List} $span -
///   Shorthand expression to define the width of the span —
///   containing a unitless column-span;
///   'of $n' for available grid columns [optional];
///   'at $n', 'first', or 'last' for location on asymmetrical grids;
///   and 'narrow', 'wide', or 'wider' for
///   optionally spreading over adjacent gutters
///   with either the `span` or `columns` value
/// @param {Map} $config [()] -
///   Optional map of Susy grid configuration settings
///
/// @return {Length} -
///   Fluid `%` length when no `column-width` is given,
///   or a static length in the same units as `column-width`
///
/// @example scss - Span half the grid
///   .foo
///     width: susy-span(6 of 12);
///   }
///
/// @example scss - Span a specific segment of asymmetrical grid
///   .foo {
///     width: susy-span(3 at 3 of (1 2 3 5 8));
///   }
@function susy-span(
  $span,
  $config: ()
) {
  $input: susy-settings($config, susy-parse($span));
  $normal: susy-normalize($input);

  @return su-span($normal...);
}


// Susy Gutter
// -----------
/// Get the width of a single gutter
/// in your current context
///
/// @group api
///
/// @param {Number | List} $context [null] -
///   Optional columns in a nested context
/// @param {Map} $config [()] -
///   Optional map of Susy grid configuration settings
///
/// @return {Length} -
///   Width of a gutter as `%` of current context,
///   or in the units defined by `column-width` when available
///
/// @example scss - Add gutters before or after an element
///   .foo {
///     margin-left: gutter();
///   }
@function susy-gutter(
  $context: susy-get('columns'),
  $config: ()
) {
  $args: ('columns', 'gutters', 'container-spread');
  $input: susy-settings($config, ('columns': $context));
  $normal: susy-normalize($input);
  $output: ();

  @each $setting in $args {
    $output: map-merge($output, ($setting: map-get($normal, $setting)));
  }

  @return su-gutter($output...);
}


// Susy Slice
// ----------
/// Get a sub-slice of columns to use
/// for a nested context
///
/// @group api
///
/// @param {List} $span -
///   Shorthand expression to define the width of the subset span —
///   containing a unitless column-span;
///   'of $n' for available grid columns [optional];
///   'at $n', 'first', or 'last' for location on asymmetrical grids;
///   and 'narrow', 'wide', or 'wider' for
///   optionally spreading over adjacent gutters
///   with either the `span` or `columns` value
///
/// @param {Map} $config [()] -
///   Optional map of Susy grid configuration settings
///
/// @return {List} -
///   Subset list of columns for use for a nested context
///
/// @example scss - Span a specific segment of the grid
///   $context: susy-slice(3 at 3 of (1 2 3 5 8)); // returns `(3 5 8)`
@function susy-slice(
  $span,
  $config: ()
) {
  $args: ('span', 'columns', 'location');
  $input: susy-settings($config, susy-parse($span));
  $normal: susy-normalize($input);
  $output: ();

  @each $setting in $args {
    $output: map-merge($output, ($setting: map-get($normal, $setting)));
  }

  @return su-slice($output...);
}
