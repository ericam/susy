// Settings
// ========
// - susy [variable]
// - susy-defaults [variable]
// - susy-get [function]


/// User custom configuration for Susy
///
/// @group grids
///
/// @type Map
///
/// @see $su-defaults
/// @see $susy-defaults
///
/// @prop {Integer} columns [4] -
///   The number of columns in the grid
/// @prop {Float} gutters [0.25] -
///   The ratio of a gutter based on a column
/// @prop {String} math ['fluid'] -
///   Either `fluid` (percentiles) or `static`
///   (any unit can be used for `column-width`)
/// @prop {Length | null} column-width [null] -
///   Only relevant when `math` option is set to `static`
/// @prop {String} spread ['narrow'] -
///   The spread of an element across edge gutters:
///   either `narrow` (none), `wide` (one), or `wider` (two)
/// @prop {String} context ['narrow'] -
///   The spread of a container around edge gutters:
///   either `narrow` (none), `wide` (one), or `wider` (two)
///
/// @example scss - All available options (to their default value)
///   $susy: (
///     'columns': 12,
///     'gutters': 1/4,
///     'math': 'fluid',
///     'column-width': null,
///     'spread': 'narrow',
///     'context': 'narrow',
///   );
$susy: () !default;


/// Default configuration map for Susy
///
/// @access private
///
/// @type Map
///
/// @prop {String} math ['fluid'] -
///   Either `fluid` (percentiles) or `static`
///   (any unit can be used for `column-width`)
/// @prop {Length | null} column-width [null] -
///   Only relevant when `math` option is set to `static`
/// @prop {String} context ['narrow'] -
///   The spread of a container around edge gutters:
///   either `narrow` (none), `wide` (one), or `wider` (two)
$susy-defaults: (
  'math': 'fluid',
  'column-width': null,
  'context': 'narrow',
);


/// Get the current value of any Susy setting
///
/// @group grids
///
/// @param {String} $key -
///   Option to retrieve from the configuration
///
/// @return {*} -
///   Value mapped to `$key` in the configuration maps, in that specific order: `$susy`, `$susy-defaults`, `$su`, `$su-defaults`
@function susy-get (
  $key
) {
  $susy-settings: map-merge($susy-defaults, $susy);
  $su-settings: map-merge($su-defaults, $su);
  $settings: map-merge($su-settings, $susy-settings);

  @if not map-has-key($settings, $key) {
    @error 'There is no Susy setting called `#{$key}`';
  }

  @return map-get($settings, $key);
}
