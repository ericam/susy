// Settings
// ========


// Default Settings
// ----------------
// PRIVATE: The basic settings
$susy-defaults: (
  columns: 4,
  gutters: 1/4,
);


// User Settings
// -------------
// - Define the $susy variable with a map of your own settings.
// - Set EITHER $column-width OR $container
// - Use $column-width for static layouts
$susy: () !default;


// Susy Defaults
// -------------
// PRIVATE: Add defaults to Susy
@mixin susy-defaults(
  $defaults
) {
  $susy-defaults: map-merge($susy-defaults, $defaults) !global;
}


// Susy Set
// --------
// Change one setting
// - $key   : setting name
// - $value : setting value
@mixin susy-set(
  $key-value...
) {
  $susy: _susy-deep-set($susy, $key-value...) !global;
}


// Susy Get
// --------
// Return one setting from a grid
// - $key     : <keyword>
// - $layout  : <settings>
$settings-cache: ();
@function susy-get(
  $key,
  $layout: map-merge($susy-defaults, $susy)
) {
  $cache-key: $key + inspect($layout);
  @if map-has-key($settings-cache, $cache-key) {
    @return map-get($settings-cache, $cache-key);
  }

  $layout: parse-grid($layout);
  $_options: $layout $susy $susy-defaults;

  $_break: false;
  $_return: null;

  @each $opt in $_options {
    @if type-of($opt) == map and not $_break {
      $_keyset: rb_susy_deep_has_key($opt, $key...);

      @if $_keyset {
        $_return: rb_susy-deep-get($opt, $key...);
        $_break: true;
      }

    }
  }

  $settings-cache: map-merge( $settings-cache, ($cache-key: $_return) ) !global;

  @return $_return;
}
