// Span Syntax
// ===========

// test the output of a parsed grid
@mixin test-parsed-span($name, $test, $expect) {
  $options  : span location columns gutters column-width layout-method layout-math outer flow gutter-position is-container gutter-override;

  @each $setting in $options {
    $index: index($options, $setting);
    $this-test: nth($test, $index);
    $this-expect: nth($expect, $index);
    @include assert-equal($this-test, $this-expect,
      '[#{$name}] #{$setting} should be "#{$this-expect}"');
  }
}

@include test-module('Span Syntax') {
  // span [mixin]
  // ------------

  @include output-test('span') {
    // default
    @include assert-setup('default', $grid: 7 .5 after) {
      .test, .expect {
        @include clearfix;
        clear: both;
        .inner { background: rgba(yellow, .25); }
      }
    }
    @include assert-output(
      'Span should set width (75%), float (left), and gutter (5% margin-right)'
    ) {
      .test {
        @include span(5) {
          .inner { @include span(2); }
        }
      }
      .expect {
        width: 70%;
        float: left;
        margin-right: 5%;
        .inner {
          width: percentage(2.5/7);
          float: left;
          margin-right: percentage(.5/7);
        }
      }
    }

    // inside
    @include assert-setup('inside', $grid: 7 .5 inside) {
      .test, .expect { clear: both; }
    }
    @include assert-output(
      'Span should set width, float, inside gutter, and border-box'
    ) {
      .test { @include span(5); }
      .expect {
        @include box-sizing(border-box);
        width: 71.42857%;
        float: left;
        padding-left: 2.5%;
        padding-right: 2.5%;
      }
    }
  }

  @include test('[mixin] span') {
    $columns: 12;

    .span-content-test {
      @include span(8 of 12) {
        @include assert-equal($columns, 8,
          'Span @content should use nested context');

        @include span(3 of 8) {
          @include assert-equal($columns, 3,
            'Nested span @content should use new nested context');
        }
      }

      @include assert-equal($columns, 12,
        'After nesting, column-count should be restored');
    }
  }

  // span [function]
  // ---------------

  @include test('[function] span') {
    $columns: 7;
    $gutters: .5;
    $layout-math: fluid;

    // simple
    $span: 5;
    $test: span($span);
    $expect: 70%;
    @include assert-equal($test, $expect,
      'Span "5" (of 7 .5) should be "#{$expect}"');

    // explicit
    $span: 5 of 7 .5 fluid;
    $test2: span($span);
    @include assert-equal($test, $test2,
      'Span width should be the same with explicit or implicit values');

    @include original-grid;

    // fully explicit
    $span: last 3 of (1 3 1 2 1) (2em 1em) static;
    $test: span($span);
    $expect: 10em;
    @include assert-equal($test, $expect,
      'Span "#{$span}" should be "#{$expect}"');

    // outer
    $span: 6 of 7 (4em 2em) outer static;
    $test: span($span);
    $expect: 36em;
    @include assert-equal($test, $expect,
      'Outer span should include gutter width');

    // inside gutters
    $span: 6 of 7 (4em 2em) inside static;
    $test: span($span);
    $expect: 36em;
    @include assert-equal($test, $expect,
      'Span with inside-gutters should include gutter width');

    // inside-static gutters
    $span: 6 of 7 (4em 2em) inside-static static;
    $test: span($span);
    $expect: 36em;
    @include assert-equal($test, $expect,
      'Span with inside-static gutters should include gutter width');
  }

  // parse-span
  // ----------

  @include test('[function] parse-span') {
    // Span #1
    $span: first 3 of 12 .25 after isolate fluid ltr outer;
    $test: parse-span($span);
    $expect: 3 1 12 0.25 false isolate fluid outer ltr after false false;

    @include test-parsed-span('parse-span: #1', $test, $expect);

    // Span #2
    $span: last 4 of (1 2 3 2 1) (4em 1em) before float static rtl container;
    $test: parse-span($span);
    $expect: 4 last (1 2 3 2 1) 0.25 4em float static false rtl before container false;

    @include test-parsed-span('parse-span: #2', $test, $expect);

    // Span #3
    $span: 1 of 3 alpha split;
    $test: parse-span($span);
    $expect: 1 1 3 $gutters $column-width $layout-method $layout-math false $flow split false false;

    @include test-parsed-span('parse-span: #3', $test, $expect);

    // Span #4
    $span: omega 3 of 7 .5 inside;
    $test: parse-span($span);
    $expect: 3 last 7 .5 $column-width $layout-method $layout-math false $flow inside false false;

    @include test-parsed-span('parse-span: #4', $test, $expect);

    // Span #5
    $span: 3 at 2 no-gutters;
    $test: parse-span($span);
    $expect: 3 2 $columns $gutters $column-width $layout-method $layout-math false $flow no-gutters false false;

    @include test-parsed-span('parse-span: #5', $test, $expect);

    // Span #6
    $span: 2 gutter 5em;
    $test: parse-span($span);
    $expect: 2 false $columns $gutters $column-width $layout-method $layout-math false $flow $gutter-position false 5em;

    @include test-parsed-span('parse-span: #6', $test, $expect);

    // Span #7
    $span: 2 of 7 (4em 2em) inside-static;
    $test: parse-span($span);
    $expect: 2 false 7 .5 4em $layout-method $layout-math false $flow inside-static false false;

    @include test-parsed-span('parse-span: #7', $test, $expect);
  }

  // get-span-setting
  // ----------------

  @include test('[function] get-span-setting') {
    $span: first 3 of 12 (4em 1em) after isolate outer fluid ltr gutters 1em container;
    $pre: parse-span($span);

    $a: get-span-setting(span, $span, parse);
    $b: get-span-setting(span, $pre);

    @include assert-equal($a, $b,
      'Get-span-setting should be the same whether pre-parsed or not');

    // span
    $test: get-span-setting(span, $pre);
    $expect: 3;

    @include assert-equal($test, $expect,
      'Span of "#{$span}" should be "#{$expect}"');

    // location
    $test: get-span-setting(location, $pre);
    $expect: 1;

    @include assert-equal($test, $expect,
      'Location of "#{$span}" should be "#{$expect}"');

    // columns
    $test: get-span-setting(columns, $pre);
    $expect: 12;

    @include assert-equal($test, $expect,
      'Columns of "#{$span}" should be "#{$expect}"');

    // gutters
    $test: get-span-setting(gutters, $pre);
    $expect: 0.25;

    @include assert-equal($test, $expect,
      'Gutters of "#{$span}" should be "#{$expect}"');

    // column-width
    $test: get-span-setting(column-width, $pre);
    $expect: 4em;

    @include assert-equal($test, $expect,
      'Columns of "#{$span}" should be "#{$expect}"');

    // layout-method
    $test: get-span-setting(layout-method, $pre);
    $expect: isolate;

    @include assert-equal($test, $expect,
      'Layout-method of "#{$span}" should be "#{$expect}"');

    // layout-math
    $test: get-span-setting(layout-math, $pre);
    $expect: fluid;

    @include assert-equal($test, $expect,
      'Layout-math of "#{$span}" should be "#{$expect}"');

    // layout-math
    $test: get-span-setting(outer, $pre);
    $expect: outer;

    @include assert-equal($test, $expect,
      'Outer of "#{$span}" should be "#{$expect}"');

    // flow
    $test: get-span-setting(flow, $pre);
    $expect: ltr;

    @include assert-equal($test, $expect,
      'Flow of "#{$span}" should be "#{$expect}"');

    // gutter-position
    $test: get-span-setting(gutter-position, $pre);
    $expect: after;

    @include assert-equal($test, $expect,
      'Gutter-position of "#{$span}" should be "#{$expect}"');

    // is-container
    $test: get-span-setting(is-container, $pre);
    $expect: container;

    @include assert-equal($test, $expect,
      'is-container of "#{$span}" should be "#{$expect}"');

    // gutter-override
    $test: get-span-setting(gutter-override, $pre);
    $expect: 1em;

    @include assert-equal($test, $expect,
      'Gutter-override of "#{$span}" should be "#{$expect}"');

  }

  // get-span-width
  // --------------

  @include test('[function] get-span-width') {
    // explicit
    $span: 30%;
    $width: get-span-width($span);
    @include assert-equal($width, $span,
      'The width of an explicit "30%" span should be "30%"');

    // relative
    $span: 5;
    $cols: 7;
    $guts: .5;
    $width: get-span-width($span, 1, $cols, $guts);
    @include assert-equal($width, 70%,
      'The relative width for "5 of 7 .5" should be "70%"');

    // relative inside-gutters
    $span: 4;
    $cols: 8;
    $guts: .25;
    $width: get-span-width($span, 1, $cols, $guts, null, fluid, inside);
    @include assert-equal($width, 50%,
      'The relative width for "4 of 8 .25 inside" should be "50%"');

    // relative inside-static gutters
    $span: 4;
    $cols: 8;
    $guts: 1/3;
    $width: get-span-width($span, 1, $cols, $guts, 6em, fluid, inside-static);
    @include assert-equal($width, 50%,
      'The relative width for "4 of 8 (6em 2em) inside" should be "50%"');

    // static
    $span: 5;
    $cols: 7;
    $guts: .5;
    $width: get-span-width($span, 1, $cols, $guts, 4em, static);
    @include assert-equal($width, 28em,
      'The static width for "5 of 7 (4em 2em)" should be "28em"');

    // static inside-gutters
    $span: 4;
    $cols: 8;
    $guts: .25;
    $width: get-span-width($span, 1, $cols, $guts, 4em, static, inside);
    @include assert-equal($width, 20em,
      'The static width for "4 of 8 .25 inside" should be "20em"');

    // outer
    $span: 5;
    $cols: 7;
    $guts: .5;
    $width: get-span-width($span, 1, $cols, $guts, $outer: outer);
    @include assert-equal($width, 75%,
      'The outer width for "5 of 7 .5" should be "75%"');
  }

  // span math
  // ---------

  @include test('[function] span-math') {
    // after
    $span: span-math(5, 2, 7, .5, 4em, float, fluid, false, ltr, after);
    $expect: 70% from null 5% null null ltr;
    @include assert-equal($span, $expect,
      'The span output for "5 at 2 of 7 .5" should be "#{$expect}"');

    // inside (padding)
    $span: span-math(5, 2, 7, .5, 4em, float, fluid, false, ltr, inside, false);
    $padding: nth($span, 5) nth($span, 6);
    $expect: 2.5% 2.5%;
    @include assert-equal($padding, $expect,
      'The padding for "5 at 2 of 7 .5 inside" should be "#{$expect}"');

    // inside (width)
    $span: span-math(6, 2, 7, .5, 4em, float, static, false, ltr, inside);
    $width: nth($span, 1);
    $expect: 36em;
    @include assert-equal($width, $expect,
      'Inside-gutter width should include the gutters');

    // outer (width)
    $span: span-math(6, 2, 7, .5, 4em, float, static, outer, ltr, after);
    $width: nth($span, 1);
    $expect: 36em;
    @include assert-equal($width, $expect,
      'Outer span width should include the gutters');

    // inside container (padding)
    $span: span-math(5, 2, 7, .5, 4em, float, fluid, false, ltr, inside, container);
    $padding: nth($span, 5) nth($span, 6);
    $expect: null null;
    @include assert-equal($padding, $expect,
      'The padding for any "inside container" should be "#{$expect}"');

    // isolate (margins)
    $span: span-math(3, 5, 7, .5, 4em, isolate, fluid, false, ltr, after);
    $margins: nth($span, 3) nth($span, 4);
    $expect: 60% -100%;
    @include assert-equal($margins, $expect,
      'The margins for "3 at 5 of 7 .5 isolate" should be "#{$expect}"');

    // after last (margins)
    $span: span-math(3, 5, 7, .5, 4em, float, static, false, ltr, after);
    $margins: nth($span, 3) nth($span, 4);
    $float: nth($span, 2);
    $expect: null null;
    @include assert-equal($margins, $expect,
      'The margins for "last after" should be "#{$expect}"');

    @include assert-equal($float, to,
      'The float for "last after" should be "to');

    // before first (margins)
    $span: span-math(3, 1, (1 2 3 2 1), .5, 4em, float, static, false, ltr, before);
    $margins: nth($span, 3) nth($span, 4);
    $expect: null null;
    @include assert-equal($margins, $expect,
      'The margins for "first before" should be "#{$expect}"');
  }

}
