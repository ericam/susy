/* Susy Tests */
/* ========== */
.test__overlay-grid .assert__overlay-grid .test head:hover ~ .sym::before,
.test__overlay-grid .assert__overlay-grid .test head:hover ~ body .sym::before, .test__overlay-grid .assert__overlay-grid .test head:hover ~ .asym::before,
.test__overlay-grid .assert__overlay-grid .test head:hover ~ body .asym::before, .test__overlay-grid .assert__overlay-grid .expect head:hover ~ .sym::before,
.test__overlay-grid .assert__overlay-grid .expect head:hover ~ body .sym::before, .test__overlay-grid .assert__overlay-grid .expect head:hover ~ .asym::before,
.test__overlay-grid .assert__overlay-grid .expect head:hover ~ body .asym::before {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  content: " ";
  z-index: 998;
}

/*  

### Column Math ------ */
/*  - [function] is-symmetrical() (3 assertions, 3 passed, 0 failed) */
/*  - [function] column-count() (2 assertions, 2 passed, 0 failed) */
/*  - [function] symmetrical column-sum() (2 assertions, 2 passed, 0 failed) */
/*  - [function] asymmetrical column-sum() (2 assertions, 2 passed, 0 failed) */
/*  - [function] symmetrical get-columns() (1 assertions, 1 passed, 0 failed) */
/*  - [function] asymmetrical get-columns() (1 assertions, 1 passed, 0 failed) */
/*  - [function] symmetrical get-column-span-sum() (2 assertions, 2 passed, 0 failed) */
/*  - [function] asymmetrical get-column-span-sum() (2 assertions, 2 passed, 0 failed) */
/*  
    Summary:
    - 8 Tests
    - 8 Passed
    - 0 Failed */
/*  

### Container Math ------ */
/*  - [function] parse-container-position (6 assertions, 6 passed, 0 failed) */
/*  - [function] calculate-container-width (2 assertions, 2 passed, 0 failed) */
/*  
    Summary:
    - 2 Tests
    - 2 Passed
    - 0 Failed */
/*  

### Location Math ------ */
/*  - [function] is-last (5 assertions, 5 passed, 0 failed) */
/*  - [function] is-first (5 assertions, 5 passed, 0 failed) */
/*  - [function] get-location-position (5 assertions, 5 passed, 0 failed) */
/*  
    Summary:
    - 3 Tests
    - 3 Passed
    - 0 Failed */
/*  

### Direction Helpers ------ */
/*  - [function] get-direction (4 assertions, 4 passed, 0 failed) */
/*  - [function] to (2 assertions, 2 passed, 0 failed) */
/*  - [function] from (2 assertions, 2 passed, 0 failed) */
/*  
    Summary:
    - 3 Tests
    - 3 Passed
    - 0 Failed */
/*  

### Nth- Helpers ------ */
/*  - [function] format-nth (5 assertions, 5 passed, 0 failed) */
/*  
    Summary:
    - 1 Tests
    - 1 Passed
    - 0 Failed */
/*  

### Settings Syntax ------ */
/*  - [Test Helper] Original Grid (2 assertions, 2 passed, 0 failed) */
/*  - [mixin] set-grid (10 assertions, 10 passed, 0 failed) */
/*  - [mixin] use-grid (6 assertions, 6 passed, 0 failed) */
/*  - [function] get-grid (3 assertions, 3 passed, 0 failed) */
/*  - [function] parse-grid (55 assertions, 55 passed, 0 failed) */
/*  - [function] get-adjusted-grid (44 assertions, 44 passed, 0 failed) */
/*  - [function] get-setting (13 assertions, 13 passed, 0 failed) */
/*  
    Summary:
    - 7 Tests
    - 7 Passed
    - 0 Failed */
/*  

### Shared Context Language ------ */
/*  - [function] nested (3 assertions, 3 passed, 0 failed) */
/*  - [mixin] nested (2 assertions, 2 passed, 0 failed) */
/*  
    Summary:
    - 2 Tests
    - 2 Passed
    - 0 Failed */
/*  

### Grid Background Syntax ------ */
/* - [mixin] background-grid */
/* "Background-grid should show 7 columns with .5 gutters" */
.test__background-grid .assert__background-grid .test {
  background: linear-gradient(to right, rgba(102, 102, 255, 0.25), rgba(179, 179, 255, 0.25) 10%, transparent 10%, transparent 15%, rgba(102, 102, 255, 0.25) 15%, rgba(179, 179, 255, 0.25) 25%, transparent 25%, transparent 30%, rgba(102, 102, 255, 0.25) 30%, rgba(179, 179, 255, 0.25) 40%, transparent 40%, transparent 45%, rgba(102, 102, 255, 0.25) 45%, rgba(179, 179, 255, 0.25) 55.0%, transparent 55.0%, transparent 60%, rgba(102, 102, 255, 0.25) 60%, rgba(179, 179, 255, 0.25) 70%, transparent 70%, transparent 75%, rgba(102, 102, 255, 0.25) 75%, rgba(179, 179, 255, 0.25) 85%, transparent 85%, transparent 90%, rgba(102, 102, 255, 0.25) 90%, rgba(179, 179, 255, 0.25));
}
.test__background-grid .assert__background-grid .expect {
  background: linear-gradient(to right, rgba(102, 102, 255, 0.25), rgba(179, 179, 255, 0.25) 10%, transparent 10%, transparent 15%, rgba(102, 102, 255, 0.25) 15%, rgba(179, 179, 255, 0.25) 25%, transparent 25%, transparent 30%, rgba(102, 102, 255, 0.25) 30%, rgba(179, 179, 255, 0.25) 40%, transparent 40%, transparent 45%, rgba(102, 102, 255, 0.25) 45%, rgba(179, 179, 255, 0.25) 55%, transparent 55%, transparent 60%, rgba(102, 102, 255, 0.25) 60%, rgba(179, 179, 255, 0.25) 70%, transparent 70%, transparent 75%, rgba(102, 102, 255, 0.25) 75%, rgba(179, 179, 255, 0.25) 85%, transparent 85%, transparent 90%, rgba(102, 102, 255, 0.25) 90%, rgba(179, 179, 255, 0.25));
}

/* - [mixin] overlay-grid */
/* ".test and .expect should have same output." */
.test__overlay-grid .assert__overlay-grid .test head {
  border-radius: 0.25em;
  display: block;
  position: fixed;
  bottom: 10px;
  left: 10px;
  z-index: 999;
  color: #333;
  text-shadow: 0 0 3px #fff;
}
.test__overlay-grid .assert__overlay-grid .test head::before {
  content: "|||";
  display: block;
  padding: 10px 14px;
  letter-spacing: -1;
  font-family: sans-serif;
  font-size: 26px;
  font-weight: bold;
}
.test__overlay-grid .assert__overlay-grid .test head:hover {
  box-shadow: 0 0 3px rgba(51, 51, 51, 0.5);
  background: rgba(255, 255, 255, 0.5);
}
.test__overlay-grid .assert__overlay-grid .test head:hover ~ .sym,
.test__overlay-grid .assert__overlay-grid .test head:hover ~ body .sym {
  position: relative;
}
.test__overlay-grid .assert__overlay-grid .test head:hover ~ .sym::before,
.test__overlay-grid .assert__overlay-grid .test head:hover ~ body .sym::before {
  background: linear-gradient(to right, rgba(102, 102, 255, 0.25), rgba(179, 179, 255, 0.25) 10%, transparent 10%, transparent 15%, rgba(102, 102, 255, 0.25) 15%, rgba(179, 179, 255, 0.25) 25%, transparent 25%, transparent 30%, rgba(102, 102, 255, 0.25) 30%, rgba(179, 179, 255, 0.25) 40%, transparent 40%, transparent 45%, rgba(102, 102, 255, 0.25) 45%, rgba(179, 179, 255, 0.25) 55.0%, transparent 55.0%, transparent 60%, rgba(102, 102, 255, 0.25) 60%, rgba(179, 179, 255, 0.25) 70%, transparent 70%, transparent 75%, rgba(102, 102, 255, 0.25) 75%, rgba(179, 179, 255, 0.25) 85%, transparent 85%, transparent 90%, rgba(102, 102, 255, 0.25) 90%, rgba(179, 179, 255, 0.25));
}
.test__overlay-grid .assert__overlay-grid .test head:hover ~ .asym,
.test__overlay-grid .assert__overlay-grid .test head:hover ~ body .asym {
  position: relative;
}
.test__overlay-grid .assert__overlay-grid .test head:hover ~ .asym::before,
.test__overlay-grid .assert__overlay-grid .test head:hover ~ body .asym::before {
  background: linear-gradient(to right, rgba(102, 102, 255, 0.25), rgba(179, 179, 255, 0.25) 4em, transparent 4em, transparent 5em, rgba(102, 102, 255, 0.25) 5em, rgba(179, 179, 255, 0.25) 13em, transparent 13em, transparent 14em, rgba(102, 102, 255, 0.25) 14em, rgba(179, 179, 255, 0.25) 26em, transparent 26em, transparent 27em, rgba(102, 102, 255, 0.25) 27em, rgba(179, 179, 255, 0.25) 35em, transparent 35em, transparent 36em, rgba(102, 102, 255, 0.25) 36em, rgba(179, 179, 255, 0.25));
}
.test__overlay-grid .assert__overlay-grid .expect head {
  border-radius: 0.25em;
  display: block;
  position: fixed;
  bottom: 10px;
  left: 10px;
  z-index: 999;
  color: #333;
  text-shadow: 0 0 3px #fff;
}
.test__overlay-grid .assert__overlay-grid .expect head::before {
  content: "|||";
  display: block;
  padding: 10px 14px;
  letter-spacing: -1;
  font-family: sans-serif;
  font-size: 26px;
  font-weight: bold;
}
.test__overlay-grid .assert__overlay-grid .expect head:hover {
  box-shadow: 0 0 3px rgba(51, 51, 51, 0.5);
  background: rgba(255, 255, 255, 0.5);
}
.test__overlay-grid .assert__overlay-grid .expect head:hover ~ .sym,
.test__overlay-grid .assert__overlay-grid .expect head:hover ~ body .sym {
  position: relative;
}
.test__overlay-grid .assert__overlay-grid .expect head:hover ~ .sym::before,
.test__overlay-grid .assert__overlay-grid .expect head:hover ~ body .sym::before {
  background: linear-gradient(to right, rgba(102, 102, 255, 0.25), rgba(179, 179, 255, 0.25) 10%, transparent 10%, transparent 15%, rgba(102, 102, 255, 0.25) 15%, rgba(179, 179, 255, 0.25) 25%, transparent 25%, transparent 30%, rgba(102, 102, 255, 0.25) 30%, rgba(179, 179, 255, 0.25) 40%, transparent 40%, transparent 45%, rgba(102, 102, 255, 0.25) 45%, rgba(179, 179, 255, 0.25) 55.0%, transparent 55.0%, transparent 60%, rgba(102, 102, 255, 0.25) 60%, rgba(179, 179, 255, 0.25) 70%, transparent 70%, transparent 75%, rgba(102, 102, 255, 0.25) 75%, rgba(179, 179, 255, 0.25) 85%, transparent 85%, transparent 90%, rgba(102, 102, 255, 0.25) 90%, rgba(179, 179, 255, 0.25));
}
.test__overlay-grid .assert__overlay-grid .expect head:hover ~ .asym,
.test__overlay-grid .assert__overlay-grid .expect head:hover ~ body .asym {
  position: relative;
}
.test__overlay-grid .assert__overlay-grid .expect head:hover ~ .asym::before,
.test__overlay-grid .assert__overlay-grid .expect head:hover ~ body .asym::before {
  background: linear-gradient(to right, rgba(102, 102, 255, 0.25), rgba(179, 179, 255, 0.25) 4em, transparent 4em, transparent 5em, rgba(102, 102, 255, 0.25) 5em, rgba(179, 179, 255, 0.25) 13em, transparent 13em, transparent 14em, rgba(102, 102, 255, 0.25) 14em, rgba(179, 179, 255, 0.25) 26em, transparent 26em, transparent 27em, rgba(102, 102, 255, 0.25) 27em, rgba(179, 179, 255, 0.25) 35em, transparent 35em, transparent 36em, rgba(102, 102, 255, 0.25) 36em, rgba(179, 179, 255, 0.25));
}

/*  - [function] get-grid-color-stops (5 assertions, 5 passed, 0 failed) */
/*  
    Summary:
    - 1 Tests
    - 1 Passed
    - 0 Failed */
/*  

### Container Syntax ------ */
/* - [mixin] container */
/* "Containers should have 80% max-width and show a 7 .5 grid." */
.test__container .assert__default-box .test {
  max-width: 80%;
  margin-left: auto;
  margin-right: auto;
  background: linear-gradient(to right, rgba(102, 102, 255, 0.25), rgba(179, 179, 255, 0.25) 10%, transparent 10%, transparent 15%, rgba(102, 102, 255, 0.25) 15%, rgba(179, 179, 255, 0.25) 25%, transparent 25%, transparent 30%, rgba(102, 102, 255, 0.25) 30%, rgba(179, 179, 255, 0.25) 40%, transparent 40%, transparent 45%, rgba(102, 102, 255, 0.25) 45%, rgba(179, 179, 255, 0.25) 55.0%, transparent 55.0%, transparent 60%, rgba(102, 102, 255, 0.25) 60%, rgba(179, 179, 255, 0.25) 70%, transparent 70%, transparent 75%, rgba(102, 102, 255, 0.25) 75%, rgba(179, 179, 255, 0.25) 85%, transparent 85%, transparent 90%, rgba(102, 102, 255, 0.25) 90%, rgba(179, 179, 255, 0.25));
}
.test__container .assert__default-box .test:after {
  content: "";
  display: table;
  clear: both;
}
.test__container .assert__default-box .expect {
  max-width: 80%;
  margin-left: auto;
  margin-right: auto;
  background: linear-gradient(to right, rgba(102, 102, 255, 0.25), rgba(179, 179, 255, 0.25) 10%, transparent 10%, transparent 15%, rgba(102, 102, 255, 0.25) 15%, rgba(179, 179, 255, 0.25) 25%, transparent 25%, transparent 30%, rgba(102, 102, 255, 0.25) 30%, rgba(179, 179, 255, 0.25) 40%, transparent 40%, transparent 45%, rgba(102, 102, 255, 0.25) 45%, rgba(179, 179, 255, 0.25) 55%, transparent 55%, transparent 60%, rgba(102, 102, 255, 0.25) 60%, rgba(179, 179, 255, 0.25) 70%, transparent 70%, transparent 75%, rgba(102, 102, 255, 0.25) 75%, rgba(179, 179, 255, 0.25) 85%, transparent 85%, transparent 90%, rgba(102, 102, 255, 0.25) 90%, rgba(179, 179, 255, 0.25));
}
.test__container .assert__default-box .expect:after {
  content: "";
  display: table;
  clear: both;
}

/* "Containers should have 40em max-width, border-box-sizing, and show a (1 2 3 2 1) (4em 2em) grid, flush left." */
.test__container .assert__border-box .test {
  box-sizing: border-box;
  max-width: 40em;
  margin-left: 0;
  margin-right: auto;
  background: linear-gradient(to right, rgba(102, 102, 255, 0.25), rgba(179, 179, 255, 0.25) 10%, transparent 10%, transparent 12.5%, rgba(102, 102, 255, 0.25) 12.5%, rgba(179, 179, 255, 0.25) 32.5%, transparent 32.5%, transparent 35%, rgba(102, 102, 255, 0.25) 35%, rgba(179, 179, 255, 0.25) 65%, transparent 65%, transparent 67.5%, rgba(102, 102, 255, 0.25) 67.5%, rgba(179, 179, 255, 0.25) 87.5%, transparent 87.5%, transparent 90%, rgba(102, 102, 255, 0.25) 90%, rgba(179, 179, 255, 0.25));
}
.test__container .assert__border-box .test:after {
  content: "";
  display: table;
  clear: both;
}
.test__container .assert__border-box .expect {
  box-sizing: border-box;
  max-width: 40em;
  margin-left: 0;
  margin-right: auto;
  background: linear-gradient(to right, rgba(102, 102, 255, 0.25), rgba(179, 179, 255, 0.25) 10%, transparent 10%, transparent 12.5%, rgba(102, 102, 255, 0.25) 12.5%, rgba(179, 179, 255, 0.25) 32.5%, transparent 32.5%, transparent 35%, rgba(102, 102, 255, 0.25) 35%, rgba(179, 179, 255, 0.25) 65%, transparent 65%, transparent 67.5%, rgba(102, 102, 255, 0.25) 67.5%, rgba(179, 179, 255, 0.25) 87.5%, transparent 87.5%, transparent 90%, rgba(102, 102, 255, 0.25) 90%, rgba(179, 179, 255, 0.25));
}
.test__container .assert__border-box .expect:after {
  content: "";
  display: table;
  clear: both;
}

/*  - [function] container (5 assertions, 5 passed, 0 failed) */
/*  - [function] get-container-width (5 assertions, 5 passed, 0 failed) */
/*  
    Summary:
    - 2 Tests
    - 2 Passed
    - 0 Failed */
/*  

### Span Syntax ------ */
/* - [mixin] span */
/* "Span should set width (75%), float (left), and gutter (5% margin-right)" */
.test__span .assert__default .test {
  width: 70%;
  float: left;
  margin-right: 5%;
}
.test__span .assert__default .test .inner {
  width: 35.71429%;
  float: left;
  margin-right: 7.14286%;
}
.test__span .assert__default .expect {
  width: 70%;
  float: left;
  margin-right: 5%;
}
.test__span .assert__default .expect .inner {
  width: 35.71429%;
  float: left;
  margin-right: 7.14286%;
}

/* "Span should set width, float, inside gutter, and border-box" */
.test__span .assert__inside .test {
  box-sizing: border-box;
  width: 71.42857%;
  float: left;
  padding-left: 2.5%;
  padding-right: 2.5%;
}
.test__span .assert__inside .expect {
  box-sizing: border-box;
  width: 71.42857%;
  float: left;
  padding-left: 2.5%;
  padding-right: 2.5%;
}

.span-content-test {
  width: 66.10169%;
  float: left;
  margin-right: 1.69492%;
  width: 35.89744%;
  float: left;
  margin-right: 2.5641%;
}

/*  - [mixin] span (3 assertions, 3 passed, 0 failed) */
/*  - [function] span (6 assertions, 6 passed, 0 failed) */
/*  - [function] parse-span (84 assertions, 84 passed, 0 failed) */
/*  - [function] get-span-setting (13 assertions, 13 passed, 0 failed) */
/*  - [function] get-span-width (7 assertions, 7 passed, 0 failed) */
/*  - [function] span-math (9 assertions, 9 passed, 0 failed) */
/*  
    Summary:
    - 6 Tests
    - 6 Passed
    - 0 Failed */
/*  

### Gutter Syntax ------ */
/* - [mixin] gutters */
/* "Item should have 2.5% padding-gutters added before and after" */
.test__gutters .assert__auto .test {
  padding-left: 2.5%;
  padding-right: 2.5%;
}
.test__gutters .assert__auto .expect {
  padding-left: 2.5%;
  padding-right: 2.5%;
}

/* "Item should have 5em padding-gutters added before and after" */
.test__gutters .assert__explicit .test {
  padding-left: 5em;
  padding-right: 5em;
}
.test__gutters .assert__explicit .expect {
  padding-left: 5em;
  padding-right: 5em;
}

/*  - [function] gutter (5 assertions, 5 passed, 0 failed) */
/*  - [function] get-gutter-width (2 assertions, 2 passed, 0 failed) */
/*  - [function] get-gutters (8 assertions, 8 passed, 0 failed) */
/*  
    Summary:
    - 3 Tests
    - 3 Passed
    - 0 Failed */
/*  

### Isolation Syntax ------ */
/* - [mixin] isolate */
/* "Item should be isolated in the last 2 columns, right-to-left" */
.test__isolate .assert__isolate .test {
  float: right;
  margin-right: 75%;
  margin-left: -100%;
}
.test__isolate .assert__isolate .expect {
  float: right;
  margin-right: 75%;
  margin-left: -100%;
}

/*  - [function] get-isolation (3 assertions, 3 passed, 0 failed) */
/*  
    Summary:
    - 1 Tests
    - 1 Passed
    - 0 Failed */
/*  

### Gallery Syntax ------ */
/* - [mixin] gallery */
/* "Items should create 3x symmetrical isolated gallery." */
.test__gallery .assert__sym .test {
  width: 28.0%;
  float: left;
  margin-right: -100%;
}
.test__gallery .assert__sym .test:nth-child(3n + 1) {
  margin-left: 0;
  clear: left;
}
.test__gallery .assert__sym .test:nth-child(3n + 2) {
  margin-left: 36%;
  clear: none;
}
.test__gallery .assert__sym .test:nth-child(3n + 3) {
  margin-left: 72%;
  clear: none;
}
.test__gallery .assert__sym .expect {
  width: 28.0%;
  float: left;
  margin-right: -100%;
}
.test__gallery .assert__sym .expect:nth-child(3n + 1) {
  margin-left: 0;
  clear: left;
}
.test__gallery .assert__sym .expect:nth-child(3n + 2) {
  margin-left: 36%;
  clear: none;
}
.test__gallery .assert__sym .expect:nth-child(3n + 3) {
  margin-left: 72%;
  clear: none;
}

/* "Items should create 3x isolated gallery with inside-gutters." */
.test__gallery .assert__inside .test {
  box-sizing: border-box;
  width: 33.33333%;
  float: left;
  margin-right: -100%;
  padding-left: 4%;
  padding-right: 4%;
}
.test__gallery .assert__inside .test:nth-child(3n + 1) {
  margin-left: 0;
  clear: left;
}
.test__gallery .assert__inside .test:nth-child(3n + 2) {
  margin-left: 33.33333%;
  clear: none;
}
.test__gallery .assert__inside .test:nth-child(3n + 3) {
  margin-left: 66.66667%;
  clear: none;
}
.test__gallery .assert__inside .expect {
  box-sizing: border-box;
  width: 33.33333%;
  float: left;
  margin-right: -100%;
  padding-left: 4%;
  padding-right: 4%;
}
.test__gallery .assert__inside .expect:nth-child(3n + 1) {
  margin-left: 0;
  clear: left;
}
.test__gallery .assert__inside .expect:nth-child(3n + 2) {
  margin-left: 33.33333%;
  clear: none;
}
.test__gallery .assert__inside .expect:nth-child(3n + 3) {
  margin-left: 66.66667%;
  clear: none;
}

/* "Items should create 3x isolated gallery with inside-static gutters." */
.test__gallery .assert__inside-static .test {
  box-sizing: border-box;
  width: 33.33333%;
  float: left;
  margin-right: -100%;
  padding-left: 2em;
  padding-right: 2em;
}
.test__gallery .assert__inside-static .test:nth-child(3n + 1) {
  margin-left: 0;
  clear: left;
}
.test__gallery .assert__inside-static .test:nth-child(3n + 2) {
  margin-left: 33.33333%;
  clear: none;
}
.test__gallery .assert__inside-static .test:nth-child(3n + 3) {
  margin-left: 66.66667%;
  clear: none;
}
.test__gallery .assert__inside-static .expect {
  box-sizing: border-box;
  width: 33.33333%;
  float: left;
  margin-right: -100%;
  padding-left: 2em;
  padding-right: 2em;
}
.test__gallery .assert__inside-static .expect:nth-child(3n + 1) {
  margin-left: 0;
  clear: left;
}
.test__gallery .assert__inside-static .expect:nth-child(3n + 2) {
  margin-left: 33.33333%;
  clear: none;
}
.test__gallery .assert__inside-static .expect:nth-child(3n + 3) {
  margin-left: 66.66667%;
  clear: none;
}

/* "Items should create 3x isolated asymmetrical gallery." */
.test__gallery .assert__asym .test {
  float: left;
  margin-right: -100%;
}
.test__gallery .assert__asym .test:nth-child(3n + 1) {
  width: 32%;
  margin-left: 0;
  clear: left;
}
.test__gallery .assert__asym .test:nth-child(3n + 2) {
  width: 32%;
  margin-left: 34%;
  clear: none;
}
.test__gallery .assert__asym .test:nth-child(3n + 3) {
  width: 32%;
  margin-left: 68%;
  clear: none;
}
.test__gallery .assert__asym .expect {
  float: left;
  margin-right: -100%;
}
.test__gallery .assert__asym .expect:nth-child(3n + 1) {
  width: 32%;
  margin-left: 0;
  clear: left;
}
.test__gallery .assert__asym .expect:nth-child(3n + 2) {
  width: 32%;
  margin-left: 34%;
  clear: none;
}
.test__gallery .assert__asym .expect:nth-child(3n + 3) {
  width: 32%;
  margin-left: 68%;
  clear: none;
}

/* "Items should create 3x isolated asymmetrical gallery, with inside gutters." */
.test__gallery .assert__asym-inside .test {
  box-sizing: border-box;
  float: left;
  margin-right: -100%;
  padding-left: 1%;
  padding-right: 1%;
}
.test__gallery .assert__asym-inside .test:nth-child(3n + 1) {
  width: 33.33333%;
  margin-left: 0;
  clear: left;
}
.test__gallery .assert__asym-inside .test:nth-child(3n + 2) {
  width: 33.33333%;
  margin-left: 33.33333%;
  clear: none;
}
.test__gallery .assert__asym-inside .test:nth-child(3n + 3) {
  width: 33.33333%;
  margin-left: 66.66667%;
  clear: none;
}
.test__gallery .assert__asym-inside .expect {
  box-sizing: border-box;
  float: left;
  margin-right: -100%;
  padding-left: 1%;
  padding-right: 1%;
}
.test__gallery .assert__asym-inside .expect:nth-child(3n + 1) {
  width: 33.33333%;
  margin-left: 0;
  clear: left;
}
.test__gallery .assert__asym-inside .expect:nth-child(3n + 2) {
  width: 33.33333%;
  margin-left: 33.33333%;
  clear: none;
}
.test__gallery .assert__asym-inside .expect:nth-child(3n + 3) {
  width: 33.33333%;
  margin-left: 66.66667%;
  clear: none;
}

/*  
    Summary:
    - 0 Tests
    - 0 Passed
    - 0 Failed */
/*

### Row Syntax ------ */
/* - [mixin] row */
/* "Rows should clear preceeding floats, and contain inner floats" */
.test__row .assert__row .test {
  clear: left;
}
.test__row .assert__row .test:after {
  content: "";
  display: table;
  clear: both;
}
.test__row .assert__row .expect {
  clear: left;
}
.test__row .assert__row .expect:after {
  content: "";
  display: table;
  clear: both;
}

/* - [mixin] unrow */
/* "Non-rows should not clear or wrap floated elements" */
.test__unrow .assert__unrow .test {
  clear: none;
}
.test__unrow .assert__unrow .test:after {
  content: none;
  display: inline;
  clear: none;
}
.test__unrow .assert__unrow .expect {
  clear: none;
}
.test__unrow .assert__unrow .expect:after {
  content: none;
  display: inline;
  clear: none;
}

/* - [mixin] first */
/* "First items should have left margins removed" */
.test__first .assert__first .test {
  margin-left: 0;
}
.test__first .assert__first .expect {
  margin-left: 0;
}

/* - [mixin] alpha */
/* "Alpha items should have left margins removed" */
.test__alpha .assert__alpha .test {
  margin-left: 0;
}
.test__alpha .assert__alpha .expect {
  margin-left: 0;
}

/* - [mixin] nth-first */
/* "Nth-first (first-child) items should have left margins removed" */
.test__nth-first .assert__nth-first .test:first-child {
  margin-left: 0;
}
.test__nth-first .assert__nth-first .expect {
  margin-left: 0;
}

/* - [mixin] nth-alpha */
/* "Nth-alpha (first-child) items should have left margins removed" */
.test__nth-alpha .assert__nth-alpha .test:first-child {
  margin-left: 0;
}
.test__nth-alpha .assert__nth-alpha .expect {
  margin-left: 0;
}

/* - [mixin] last */
/* "Last items should float right, with right margins removed" */
.test__last .assert__last .test {
  float: right;
  margin-right: 0;
}
.test__last .assert__last .expect {
  float: right;
  margin-right: 0;
}

/* - [mixin] omega */
/* "Omega items should float right, with right margins removed" */
.test__omega .assert__omega .test {
  float: right;
  margin-right: 0;
}
.test__omega .assert__omega .expect {
  float: right;
  margin-right: 0;
}

/* - [mixin] nth-last */
/* "nth-last(2, last-child) items should float right, with right margins removed" */
.test__nth-last .assert__nth-last .test:nth-last-child(2) {
  float: right;
  margin-right: 0;
}
.test__nth-last .assert__nth-last .expect {
  float: right;
  margin-right: 0;
}

/* - [mixin] nth-omega */
/* "nth-omega(2, last-child) items should float right, with right margins removed" */
.test__nth-omega .assert__nth-omega .test:nth-last-child(2) {
  float: right;
  margin-right: 0;
}
.test__nth-omega .assert__nth-omega .expect {
  float: right;
  margin-right: 0;
}

/*

### Margin Syntax ------ */
/* - [mixin] pre */
/* "Items should have 3-columns margin before." */
.test__pre .assert__pre .test {
  margin-left: 45%;
}
.test__pre .assert__pre .expect {
  margin-left: 45%;
}

/* - [mixin] post */
/* "Items should have 2-columns margin after." */
.test__post .assert__post .test {
  margin-right: 35%;
}
.test__post .assert__post .expect {
  margin-right: 35%;
}

/* - [mixin] push */
/* "Items should have 2-columns margin before." */
.test__push .assert__push .test {
  margin-left: 35%;
}
.test__push .assert__push .expect {
  margin-left: 35%;
}

/* - [mixin] pull */
/* "Items should pull 1-column, overlapping the spacer." */
.test__pull .assert__pull .test {
  margin-left: -22.5%;
}
.test__pull .assert__pull .expect {
  margin-left: -22.5%;
}

/* - [mixin] squish */
/* "Items should have 2-columns margin before and after." */
.test__squish .assert__simple .test {
  margin-left: 35%;
  margin-right: 35%;
}
.test__squish .assert__simple .expect {
  margin-left: 35%;
  margin-right: 35%;
}

/* "Items should have 1-column margin before, and 2 after - nested." */
.test__squish .assert__nested .test {
  margin-left: 15%;
  margin-right: 30%;
}
.test__squish .assert__nested .expect {
  margin-left: 15%;
  margin-right: 30%;
}

/*

### Padding Syntax ------ */
/* - [mixin] prefix */
/* "Items should have 3 columns padding before." */
.test__prefix .assert__prefix .test {
  padding-left: 45%;
}
.test__prefix .assert__prefix .expect {
  padding-left: 45%;
}

/* - [mixin] suffix */
/* "Items should have 2 columns padding after." */
.test__suffix .assert__suffix .test {
  padding-right: 35%;
}
.test__suffix .assert__suffix .expect {
  padding-right: 35%;
}

/* - [mixin] pad */
/* "Items should have 2 columns padding before and after." */
.test__pad .assert__simple .test {
  padding-left: 35%;
  padding-right: 35%;
}
.test__pad .assert__simple .expect {
  padding-left: 35%;
  padding-right: 35%;
}

/* "Items should have 1 column padding before, and 2 after - nested." */
.test__pad .assert__nested .test {
  padding-left: 15%;
  padding-right: 30%;
}
.test__pad .assert__nested .expect {
  padding-left: 15%;
  padding-right: 30%;
}

/*

### Grid Background API ------ */
/* - [mixin] background-grid-output */
/* "Elements should show a horizontal red-green-blue gradient, and a vertical baseline" */
.test__background-grid-output .assert__show .test {
  background: linear-gradient(to right, #ffcccc, #ccffcc 25%, #ccccff);
}
.test__background-grid-output .assert__show .expect {
  background: linear-gradient(to top, rgba(0, 0, 0, 0.5) 5%, rgba(0, 0, 0, 0) 5%), linear-gradient(to right, #ffcccc, #ccffcc 25%, #ccccff);
  background-size: 100% 24px;
  background-position: left top;
}

/* "Elements should show a horizontal red-green-blue gradient, with no baseline" */
.test__background-grid-output .assert__show-columns .test {
  background: linear-gradient(to right, #ffcccc, #ccffcc 25%, #ccccff);
}
.test__background-grid-output .assert__show-columns .expect {
  background: linear-gradient(to right, #ffcccc, #ccffcc 25%, #ccccff);
}

/* "Elements should show a vertical baseline" */
.test__background-grid-output .assert__show-baseline .test {
  background: linear-gradient(to right, #ffcccc, #ccffcc 25%, #ccccff);
}
.test__background-grid-output .assert__show-baseline .expect {
  background: linear-gradient(to top, rgba(0, 0, 0, 0.5) 5%, rgba(0, 0, 0, 0) 5%);
  background-size: 100% 24px;
  background-position: left top;
}

/* "Elements should not show any grid background" */
.test__background-grid-output .assert__hide .test {
  background: linear-gradient(to right, #ffcccc, #ccffcc 25%, #ccccff);
}

/*

### Shared Container API ------ */
/* - [mixin] container-output */
/* "Containers should have 60em max-width, centered." */
.test__container-output .assert__fluid .test {
  max-width: 60em;
  margin-left: auto;
  margin-right: auto;
}
.test__container-output .assert__fluid .expect {
  max-width: 60em;
  margin-left: auto;
  margin-right: auto;
}

/* "Containers should have 30em width, flush right." */
.test__container-output .assert__static .test {
  width: 30em;
  margin-left: auto;
  margin-right: 0;
}
.test__container-output .assert__static .expect {
  width: 30em;
  margin-left: auto;
  margin-right: 0;
}

/*

### Shared Margin API ------ */
/* - [mixin] margin-output */
/* "Elements should have 25% right margin, 8em left." */
.test__margin-output .assert__margin-output .test {
  margin-right: 25%;
  margin-left: 8em;
}
.test__margin-output .assert__margin-output .expect {
  margin-right: 25%;
  margin-left: 8em;
}

/*

### Shared Padding API ------ */
/* - [mixin] padding-output */
/* "Elements should have 25% right padding, 8em left." */
.test__padding-output .assert__padding-output .test {
  padding-right: 25%;
  padding-left: 8em;
}
.test__padding-output .assert__padding-output .expect {
  padding-right: 25%;
  padding-left: 8em;
}

/*

### Float Container API ------ */
/* - [mixin] float-container */
/* "Containers should be 30em wide, flush left." */
.test__float-container .assert__float-container .test {
  max-width: 30em;
  margin-left: 0;
  margin-right: auto;
}
.test__float-container .assert__float-container .test:after {
  content: "";
  display: table;
  clear: both;
}
.test__float-container .assert__float-container .expect {
  max-width: 30em;
  margin-left: 0;
  margin-right: auto;
}
.test__float-container .assert__float-container .expect:after {
  content: "";
  display: table;
  clear: both;
}

/*

### Float Span API ------ */
/* - [mixin] float-span-output */
/* "Output should be 25%, floated left, with matching margins/padding" */
.test__float-span-output .assert__full .test {
  width: 25%;
  float: left;
  margin-left: 5em;
  margin-right: 2em;
  padding-left: 3em;
  padding-right: 4em;
}
.test__float-span-output .assert__full .expect {
  width: 25%;
  float: left;
  margin-left: 5em;
  margin-right: 2em;
  padding-left: 3em;
  padding-right: 4em;
}

/* "Output should be 25%, floated right" */
.test__float-span-output .assert__float-to .test {
  width: 25%;
  float: right;
}
.test__float-span-output .assert__float-to .expect {
  width: 25%;
  float: right;
}

/* "Output should be 25%, not floated" */
.test__float-span-output .assert__float-null .test {
  width: 25%;
}
.test__float-span-output .assert__float-null .expect {
  width: 25%;
}

/*

### Float End API ------ */
/* - [mixin] float-last */
/* "Items should float flush right." */
.test__float-last .assert__float-last .test {
  float: right;
  margin-right: 0;
}
.test__float-last .assert__float-last .expect {
  float: right;
  margin-right: 0;
}

/* - [mixin] float-first */
/* "Items should float flush left." */
.test__float-first .assert__float-first .test {
  margin-left: 0;
}
.test__float-first .assert__float-first .expect {
  margin-left: 0;
}

/*

### Isolation API ------ */
/* - [mixin] isolate-output */
/* "Isolation at 30%, has 30% left margin and -100% right margin." */
.test__isolate-output .assert__isolate-output .test {
  float: left;
  margin-left: 30%;
  margin-right: -100%;
}
.test__isolate-output .assert__isolate-output .expect {
  float: left;
  margin-left: 30%;
  margin-right: -100%;
}
